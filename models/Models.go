// Copyright 2019 Cohesity Inc.
package models



/*
 * Structure for the custom type VolumeInfo
 */
type VolumeInfo struct {
    VolumeName             *string         `json:"volumeName,omitempty" form:"volumeName,omitempty"` //Name of the volume
    VolumeTag              *string         `json:"volumeTag,omitempty" form:"volumeTag,omitempty"` //A unique tag generated by apps backend for the volume
    VolumeCapacityBytes    *int64          `json:"volumeCapacityBytes,omitempty" form:"volumeCapacityBytes,omitempty"` //volume capacity
    Status                 StatusEnum      `json:"status,omitempty" form:"status,omitempty"` //Status of the volume
    Details                *string         `json:"details,omitempty" form:"details,omitempty"` //Human readable details of the status of the volume
    InitializingPercentage *int64          `json:"initializingPercentage,omitempty" form:"initializingPercentage,omitempty"` //Estimate of the progress of initializing the volume
}

/*
 * Structure for the custom type VolumeSpec
 */
type VolumeSpec struct {
    VolumeType          VolumeTypeEnum  `json:"volumeType" form:"volumeType"` //Type of the backing for the volume
    VolumeCapacityBytes *int64          `json:"volumeCapacityBytes,omitempty" form:"volumeCapacityBytes,omitempty"` //volume capacity
    VolumeClaimRef      *string         `json:"volumeClaimRef,omitempty" form:"volumeClaimRef,omitempty"` //The specific persistent volume claim that will claim this volume.
    DiskImageLocation   *string         `json:"diskImageLocation,omitempty" form:"diskImageLocation,omitempty"` //Path for disk image from which to create volume. Can either be an absolute path or relative path in the app's output view.
    DiskType            DiskTypeEnum    `json:"diskType,omitempty" form:"diskType,omitempty"` //Disk type
    SysprepOperations   *[]SysprepOperationEnum `json:"sysprepOperations,omitempty" form:"sysprepOperations,omitempty"` //Sequence of sysprep operations to be done on the disk
    UserSshKeys         []*UserSshKeyInfo `json:"userSshKeys,omitempty" form:"userSshKeys,omitempty"` //Ssh keys for some users to be inserted into the VM.
    SwapMountPoint      *string         `json:"swapMountPoint,omitempty" form:"swapMountPoint,omitempty"` //Swap mount point to be inserted.
}

/*
 * Structure for the custom type Error
 */
type Error struct {
    ErrorCode       int64           `json:"errorCode" form:"errorCode"` //Type of the error.
    Message         string          `json:"message" form:"message"` //Description of the error.
}

/*
 * Structure for the custom type UserSshKeyInfo
 */
type UserSshKeyInfo struct {
    Username        *string         `json:"username,omitempty" form:"username,omitempty"` //Username.
    SshKey          *string         `json:"sshKey,omitempty" form:"sshKey,omitempty"` //Ssh key for the user.
}

/*
 * Structure for the custom type MountOptions
 */
type MountOptions struct {
    DirName           string          `json:"dirName" form:"dirName"` //Directory where view/namespace or volume of a protected source is mounted.
    ViewName          *string         `json:"viewName,omitempty" form:"viewName,omitempty"` //The name of the external cohesity view that is to be mounted.
    MountOptions      *string         `json:"mountOptions,omitempty" form:"mountOptions,omitempty"` //Additional options for mount. All options from mount command are supported e.g. rw, ro.
    MountProtocol     MountProtocolEnum `json:"mountProtocol,omitempty" form:"mountProtocol,omitempty"` //Type of the mount.
    UserName          *string         `json:"userName,omitempty" form:"userName,omitempty"` //Username if the mount type is smb.
    Password          *string         `json:"password,omitempty" form:"password,omitempty"` //Password if the mount type is smb.
    NamespaceName     *string         `json:"namespaceName,omitempty" form:"namespaceName,omitempty"` //If this type of mount is nfs this is the namespace within the view that is to be mounted.
    ProtectedSourceId *int64          `json:"protectedSourceId,omitempty" form:"protectedSourceId,omitempty"` //If mounting snapshot of a protected source this is the unique ID of the protected source.
    ProtectionJobRun  *ProtectionJobRun `json:"protectionJobRun,omitempty" form:"protectionJobRun,omitempty"` //Identification of a protection job run.
    VolumeName        *string         `json:"volumeName,omitempty" form:"volumeName,omitempty"` //Name of the volume of the VM to mount if the protected source is of type VM.
    PodUid            *string         `json:"podUid,omitempty" form:"podUid,omitempty"` //The UID of the pod on which the container is running.
}

/*
 * Structure for the custom type ManagementAccessToken
 */
type ManagementAccessToken struct {
    AccessToken     *string         `json:"accessToken,omitempty" form:"accessToken,omitempty"` //Token which can be used to call Iris Management APIs.
    TokenType       *string         `json:"tokenType,omitempty" form:"tokenType,omitempty"` //Type of the token returned. E.g. Bearer.
    Error           *Error          `json:"error,omitempty" form:"error,omitempty"` //Specifies more information in case of errors.
}

/*
 * Structure for the custom type User
 */
type User struct {
    Domain          *string         `json:"domain,omitempty" form:"domain,omitempty"` //Domain of the user who launched the app instance.
    UserName        *string         `json:"userName,omitempty" form:"userName,omitempty"` //Username of the user who launched the app instance.
}

/*
 * Structure for the custom type ViewPrivileges
 */
type ViewPrivileges struct {
    PrivilegesType  PrivilegesTypeEnum `json:"privilegesType,omitempty" form:"privilegesType,omitempty"` //Specifies if all, none or specific views are allowed to be accessed.
    ViewIds         *[]int64        `json:"viewIds,omitempty" form:"viewIds,omitempty"` //Specifies the ids of the views which are allowed to be accessed in case the privilege type is kSpecific.
}

/*
 * Structure for the custom type AppInstanceSettings
 */
type AppInstanceSettings struct {
    QosTier                 QosTierEnum     `json:"qosTier,omitempty" form:"qosTier,omitempty"` //Specifies QoS Tier for an app instance. App instances are allocated resources such as memory, CPU and IO based on their QoS Tier.
    ReadViewPrivileges      *ViewPrivileges `json:"readViewPrivileges,omitempty" form:"readViewPrivileges,omitempty"` //Specifies privileges that are required for this app.
    ReadWriteViewPrivileges *ViewPrivileges `json:"readWriteViewPrivileges,omitempty" form:"readWriteViewPrivileges,omitempty"` //Specifies privileges that are required for this app.
}

/*
 * Structure for the custom type ProtectionJobRun
 */
type ProtectionJobRun struct {
    JobId           *int64          `json:"jobId,omitempty" form:"jobId,omitempty"` //Id of the protection job unique within the cohesity cluster.
    RunId           *int64          `json:"runId,omitempty" form:"runId,omitempty"` //Id of a run of the protection job.
}

/*
 * Structure for the custom type ProtectedSourceVolumeInfo
 */
type ProtectedSourceVolumeInfo struct {
    Volumes         *[]string       `json:"volumes,omitempty" form:"volumes,omitempty"` //Names of volumes of the protected source.
}

/*
 * Structure for the custom type AppSettings
 */
type AppSettings struct {
    User                *User           `json:"user,omitempty" form:"user,omitempty"` //Specifies user information who launched the given app instance.
    AppInstanceSettings *AppInstanceSettings `json:"appInstanceSettings,omitempty" form:"appInstanceSettings,omitempty"` //TODO: Write general description for this field
}
